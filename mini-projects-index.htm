<!DOCTYPE html>
<html>
<head>
    <title>John CS - Mini Projects</title>

    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <meta name="description" content="A blog by John Christopher Sullivan">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:300,400,600' rel='stylesheet' type='text/css'>

    <!-- inject:head:css -->
    <style>* {
  font-family: "Source Code Pro", serif;
  font-size: 14px;
  line-height: 20px;
  letter-spacing: 0;
}
html {
  -webkit-text-size-adjust: 100%;
}
body {
  background-color: #fdf6e3;
  color: #657b83;
  padding: 20px 2ch 200px 2ch;
}
@media (max-width: 46ch) {
  body {
    padding-bottom: 100px;
  }
}
a {
  text-decoration: none;
  color: #b58900;
}
a:hover {
  text-decoration: underline;
}
.single-column-content {
  max-width: 72ch;
  margin-left: auto;
  margin-right: auto;
}
.block-quote-markup {
  color: #859900;
}
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}
tt {
  font-weight: 300;
}
.nav-bar {
  background-color: #eee8d5;
  border-left: 1ch solid #268bd2;
  border-right: 1ch solid #268bd2;
  margin-bottom: 20px;
  padding: 0 1ch;
}
.nav-bar ul {
  padding: 0;
  margin: 0;
  list-style: none;
  display: inline;
}
.nav-bar ul li {
  display: inline;
}
.nav-bar ul li:after {
  content: ", ";
}
.nav-bar ul li:last-child:after {
  content: "";
}
.nav-bar a {
  color: #268bd2;
}
img {
  background-color: #eee8d5;
  border-color: #eee8d5;
  border-style: solid;
  border-width: 20px 2ch;
  box-sizing: border-box;
  display: block;
  margin-bottom: 20px;
  margin-left: auto;
  margin-right: auto;
  max-width: 60ch;
  width: 100%;
}
img.small-image {
  max-width: 40ch;
}
img.tiny-image {
  max-width: 30ch;
}
@media (min-width: 80ch) {
  .floating-head {
    float: left;
    margin-right: 2ch;
  }
}
p,
ol,
ul {
  margin: 0 0 20px 0;
}
h2 {
  font-weight: 600;
  margin: 0 0 20px 0;
}
.page-info {
  margin-bottom: 20px;
}
.post {
  margin-bottom: 20px;
}
.post .post-heading {
  margin-bottom: 20px;
  background-color: #eee8d5;
}
.post .post-heading .post-date {
  font-weight: 300;
  color: #6c71c4;
}
.post .post-snippet-container {
  position: relative;
  overflow-y: hidden;
}
.post .post-snippet-container .quote-gutter {
  word-wrap: break-word;
  color: #859900;
  width: 1ch;
  position: absolute;
  user-select: none;
}
.post .post-snippet-container .post-snippet {
  margin-left: 2ch;
}
.post-body ol,
.post-body ul {
  list-style: none;
  padding: 0;
}
.post-body ol > li {
  counter-increment: item;
  padding-left: 4ch;
  position: relative;
}
.post-body ol > li:before {
  color: #859900;
  content: counter(item) ".";
  display: inline-block;
  left: 0;
  padding: 0 1ch;
  position: absolute;
}
.post-body ul > li {
  padding-left: 3ch;
  position: relative;
}
.post-body ul > li:before {
  color: #859900;
  content: "*";
  display: inline-block;
  left: 0;
  padding: 0 1ch;
  position: absolute;
}
.post-body .red-bold {
  color: #DC322F;
}
.post-body .rounded-40 {
  border-radius: 40px;
}
.post-body table.footnote td {
  padding: 0;
  margin: 0;
}
.post-body table.footnote td.label {
  padding-right: 1ch;
}
.post-body tt,
.post-body pre {
  font-weight: 300;
}
.post-body tt b,
.post-body pre b,
.post-body tt strong,
.post-body pre strong {
  font-weight: normal;
}
.post-body pre {
  padding: 0 0 0 4ch;
  white-space: pre-wrap;
}
.post-body h2,
.post-body h3,
.post-body h4,
.post-body h5,
.post-body h6 {
  font-weight: 600;
}
.post-body h2 *,
.post-body h3 *,
.post-body h4 *,
.post-body h5 *,
.post-body h6 * {
  font-weight: 600;
}
.post-body em,
.post-body i {
  font-style: normal;
  font-weight: 600;
}
.soft {
  font-weight: 300;
}
.timestamp-anchor {
  color: #6c71c4;
}
</style>
    <!-- endinject -->
</head>
<body class="single-column-content">
    <nav class="nav-bar">
        <a href="/">John CS</a>:
        <ul>
            <li><a href="./blog-index.htm">Blog</a></li>
            <li>Mini Projects</li>
            <li><a href="http://johnsullivan.name">Portfolio</a></li>
            <li><a href="https://github.com/brownhead">GitHub</a></li>
            <li><a href="https://twitter.com/itsjohncs">Twitter</a></li>
        </ul>
    </nav>
    <div class="page-info">
        Sometimes I finish itty-bitty projects and put them here! These are the one-night projects; the beautiful i-just-thought-of-something-fun-to-make creations; the sorts of projects I used to make all the time when I was younger but now that I'm all mature and adulty I don't usually have time to complete.<br><br>If these are the sorts of projects that you like, follow along with me via <a href="https://twitter.com/itsjohncs">Twitter</a>. <span class="soft">(Psst... Check out <a href="http://johnsullivan.name">my portfolio</a> for less-mini projects)</span>
    </div>
    <h2><span aria-hidden="true">##</span> All Mini Projects</h2>
    <div class="all-posts">
        <article class="post">
            <div class="post-heading">
                <span>
                    <a href="https://github.com/brownhead/tbget" class="post-title">tbget</a>
                    <time class="post-date"><span aria-hidden="true">[<a class="timestamp-anchor" name="tbget" href="#tbget">08/04/2015</a>]</span><span class="sr-only">August 4, 2015</span></time>
                </span>
            </div>
            <div class="post-body">
                <div class="document">
<p>Pretty often when I'm looking at some of the logs at Khan Academy, I find a traceback that I want to take a closer look at, but it has been shoved through a JSON parser or <tt class="docutils literal">repr()</tt> a couple times. So I end up spending a couple minutes just formatting it enough to be readable.</p>
<p>WELL NO MORE!! Look at this absolutely terribly encoded traceback:</p>
<pre class="code literal-block">
'{&quot;test_data&quot;: &quot;{\\&quot;data\\&quot;: \\&quot;$ tools/runtests.py
\\\\nRUNNING ALL SORTS OF TESTS\\\\nSTUFF IS
PASSING!!\\\\n^CTraceback (most recent call last):\\\\n
File \\\\\\&quot;tools/devshell.py\\\\\\&quot;, line 145, in
&lt;module&gt;\\\\n    from devshell_eval import *\\\\n  File \\
\\\\&quot;webapp/tools/devshell_eval.p
y\\\\\\&quot;, line 4, in &lt;module&gt;\\\\n    from
assessment_items.models import *\\\\n  File \\\\\\&quot;khan27/lib/python2.7/sre_parse.p
y\\\\\\&quot;, line 126, in __len__\\\\n    def
__len__(self):\\\\nKeyboardInterrupt\\\\n$\\\\n\\&quot;,
\\&quot;type\\&quot;: \\&quot;traceback\\&quot;}&quot;, &quot;test_result&quot;: &quot;aborted&quot;}'
</pre>
<p>THE TERROR!!! Fortunately I made a script that turns that big blob into something a bit nicer:</p>
<pre class="code pytb literal-block">
<span class="gt">Traceback (most recent call last):
</span>  File <span class="nb">&quot;tools/devshell.py&quot;</span>, line <span class="m">145</span>, in <span class="n">&lt;module&gt;</span>
    <span class="kn">from</span> <span class="nn">devshell_eval</span> <span class="kn">import</span> <span>*</span>
  File <span class="nb">&quot;webapp/tools/devshell_eval.py&quot;</span>, line <span class="m">4</span>, in <span class="n">&lt;module&gt;</span>
    <span class="kn">from</span> <span class="nn">assessment_items.models</span> <span class="kn">import</span> <span>*</span>
  File <span class="nb">&quot;khan27/lib/python2.7/sre_parse.py&quot;</span>, line <span class="m">126</span>, in <span class="n">__len__</span>
    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="gr">KeyboardInterrupt\\\\n$\\\\n\\&quot;,
\\&quot;type\\&quot;</span>: <span class="n">\\&quot;traceback\\&quot;}&quot;, &quot;test_result&quot;: &quot;aborted&quot;}'</span>
</pre>
<p>Unfortunately I don't think it's possible for my tool to know for sure when a traceback ends using its current strategy, so there's some gunk at the end, but eh.</p>
</div>

            </div>
        </article>
        <article class="post">
            <div class="post-heading">
                <span>
                    <a href="https://github.com/brownhead/simple-frontmatter" class="post-title">Simple Frontmatter Parser</a>
                    <time class="post-date"><span aria-hidden="true">[<a class="timestamp-anchor" name="simple-frontmatter" href="#simple-frontmatter">08/03/2015</a>]</span><span class="sr-only">August 3, 2015</span></time>
                </span>
            </div>
            <div class="post-body">
                <div class="document">
<p>I wonder how many people have implemented a simple frontmatter parser... Judging by the volume of static site generators out there I bet there's a bunch.</p>
<p>I made one for <a class="reference external" href="https://github.com/brownhead/phial">Phial</a> that was totally over-engineered awhile ago, but then for the <a class="reference external" href="http://engineering.khanacademy.org">KA Engineering blog</a> and <a class="reference external" href="http://johncs.com">this site</a> I went with a simpler version. I doubt it'd be useful, but just in case I figured I should release it under the UNLICENSE.</p>
<p>Here's a document that the parser could handle:</p>
<pre class="code literal-block">
# post.rst
title: The best post ever
author: John
...

This really is the best post ever
=================================

I assure you.
</pre>
<p>And here's some code that uses the parser:</p>
<pre class="code pycon literal-block">
<span class="kn"></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">simple_frontmatter</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;post.rst&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
<span class="gp">... </span>    <span class="n">frontmatter</span><span class="p">,</span> <span class="n">contents</span> <span>=</span> <span class="n">simple_frontmatter</span><span>.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">frontmatter</span>
<span class="go">{'title': 'The best post ever', 'author': 'John'}
</span><span class="n"></span><span class="gp">&gt;&gt;&gt; </span><span class="n">contents</span>
<span class="go">'\nThis really is the best post ever\n=================================\n\nI assure you.\n'</span>
</pre>
</div>

            </div>
        </article>
        <article class="post">
            <div class="post-heading">
                <span>
                    <a href="https://github.com/brownhead/die-sim" class="post-title">Die Simulator</a>
                    <time class="post-date"><span aria-hidden="true">[<a class="timestamp-anchor" name="die-sim" href="#die-sim">05/22/2015</a>]</span><span class="sr-only">May 22, 2015</span></time>
                </span>
            </div>
            <div class="post-body">
                <div class="document">
<p>Ever play D&amp;D, realize you forgot your dice, and decide to write up a script to roll dice for you? Me too! I made it in Python and didn't spend a ton of time adding features, so its understanding of dice-rolling syntax (like <tt class="docutils literal">2d10+8</tt>) is pretty minimal, but it works great!</p>
<a class="reference external image-reference" href="https://raw.githubusercontent.com/brownhead/die-sim/master/demo.gif"><img alt="A demo of the die simulator" src="https://raw.githubusercontent.com/brownhead/die-sim/master/demo.gif" /></a>
<p>My initial version of this program had an off by one error which prevented me from ever getting a 20 when rolling a d20! I was upset.</p>
</div>

            </div>
        </article>
        <article class="post">
            <div class="post-heading">
                <span>
                    <a href="https://github.com/brownhead/different-logger" class="post-title">Different Logger</a>
                    <time class="post-date"><span aria-hidden="true">[<a class="timestamp-anchor" name="different-logger" href="#different-logger">08/13/2014</a>]</span><span class="sr-only">August 13, 2014</span></time>
                </span>
            </div>
            <div class="post-body">
                <div class="document">
<p>I wanted Python's logging library to give me pretty output and highlight the substituted values. So I made a little library that'd make it do all those things! Here's some output:</p>
<a class="reference external image-reference" href="/images/different-logger-messages.png"><img alt="Various log messages printed by the logger." src="/images/different-logger-messages.png" /></a>
<a class="reference external image-reference" href="/images/different-logger-exception.png"><img alt="A log message with a stack trace printed by the logger." src="/images/different-logger-exception.png" /></a>
<p>You don't need to do anything special to use it, just use the Python <tt class="docutils literal">logging</tt> library like normal (ex: <tt class="docutils literal"><span class="pre">logging.error(&quot;%s</span> foobars received, expected 17&quot;, num_foobars)</tt>).</p>
</div>

            </div>
        </article>
    </div>
    <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-51104787-1', 'johncs.com');
        ga('send', 'pageview');
    </script>
</body>
</html>
