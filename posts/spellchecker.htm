<!DOCTYPE html>
<html>
<head>
    <title>John CS - Typos in search queries at Khan Academy</title>

    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:300,400,600' rel='stylesheet' type='text/css'>

    <!-- inject:head:css -->
    <style>* {
  font-family: "Source Code Pro", serif;
  font-size: 12px;
  line-height: 16px;
  letter-spacing: 0;
}
body {
  background-color: #fdf6e3;
  color: #657b83;
  padding: 16px 2ch 160px 2ch;
}
@media (max-width: 46ch) {
  body {
    padding-bottom: 80px;
  }
}
a {
  text-decoration: none;
  color: #b58900;
}
a:hover {
  text-decoration: underline;
}
.single-column-content {
  max-width: 72ch;
  margin-left: auto;
  margin-right: auto;
}
.block-quote-markup {
  color: #859900;
}
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}
tt {
  font-weight: 300;
}
.nav-bar {
  background-color: #eee8d5;
  border-left: 1ch solid #268bd2;
  border-right: 1ch solid #268bd2;
  margin-bottom: 16px;
  padding: 0 1ch;
}
.nav-bar ul {
  padding: 0;
  margin: 0;
  list-style: none;
  display: inline;
}
.nav-bar ul li {
  display: inline;
}
.nav-bar ul li:after {
  content: ", ";
}
.nav-bar ul li:last-child:after {
  content: "";
}
.nav-bar a {
  color: #268bd2;
}
img {
  background-color: #eee8d5;
  border-color: #eee8d5;
  border-style: solid;
  border-width: 16px 2ch;
  box-sizing: border-box;
  display: block;
  margin-bottom: 16px;
  margin-left: auto;
  margin-right: auto;
  max-width: 60ch;
  width: 100%;
}
img.small-image {
  max-width: 40ch;
}
img.tiny-image {
  max-width: 30ch;
}
@media (min-width: 80ch) {
  .floating-head {
    float: left;
    margin-right: 2ch;
  }
}
p,
ol,
ul {
  margin: 0 0 16px 0;
}
.post-body ol,
.post-body ul {
  list-style: none;
  padding: 0;
}
.post-body ol > li {
  counter-increment: item;
  padding-left: 4ch;
  position: relative;
}
.post-body ol > li:before {
  color: #859900;
  content: counter(item) ".";
  display: inline-block;
  left: 0;
  padding: 0 1ch;
  position: absolute;
}
.post-body ul > li {
  padding-left: 3ch;
  position: relative;
}
.post-body ul > li:before {
  color: #859900;
  content: "*";
  display: inline-block;
  left: 0;
  padding: 0 1ch;
  position: absolute;
}
.post-body .red-bold {
  color: #DC322F;
}
.post-body .rounded-40 {
  border-radius: 40px;
}
.post-body table.footnote td {
  padding: 0;
  margin: 0;
}
.post-body table.footnote td.label {
  padding-right: 1ch;
}
.post-body tt,
.post-body pre {
  font-weight: 300;
}
.post-body tt b,
.post-body pre b,
.post-body tt strong,
.post-body pre strong {
  font-weight: normal;
}
.post-body pre {
  padding: 0 0 0 4ch;
  white-space: pre-wrap;
}
.post-body h2,
.post-body h3,
.post-body h4,
.post-body h5,
.post-body h6 {
  font-weight: 600;
}
.post-body h2 *,
.post-body h3 *,
.post-body h4 *,
.post-body h5 *,
.post-body h6 * {
  font-weight: 600;
}
.post-body em,
.post-body i {
  font-style: normal;
  font-weight: 600;
}
.top-bar {
  background-color: #eee8d5;
  margin-bottom: 16px;
}
.top-bar .post-date {
  font-weight: 300;
  color: #6c71c4;
}
.top-bar a {
  color: #268bd2;
}
</style>
    <!-- endinject -->
</head>
<body class="single-column-content">
    <header class="top-bar">
        <a href="/">John CS</a> &gt; <a href="../blog-index.htm">Blog</a> &gt; Typos in search queries at Khan Academy <span class="post-date">[04/11/2015]</span>
    </header>
    <div class="post-body">
        <div class="document">
<p>One year ago, searching for <em>polinomials</em> on <a class="reference external" href="https://www.khanacademy.org/search">Khan Academy's search page</a> would give you no results. If you typed the same thing into Google you'd be efficiently and politely corrected.</p>
<img alt="Google's &quot;Showing results for...&quot; feature." src="/images/showing_results_for.png" />
<p>I didn't have any illusions of making a solution as good as Google's, but I figured I could improve things for a significant number of users anyways <a class="footnote-reference" href="#reach-research" id="id1">[1]</a>.</p>
<p>The first thing I did was see if there was some library or tool that we could use to do some simple spellchecking. Khan Academy runs on Google App Engine's Python platform, so I needed a pure-Python library (<a class="reference external" href="https://cloud.google.com/appengine/docs/python/#Python_Pure_Python">installing CPython extensions is not allowed</a>).</p>
<p><a class="reference external" href="https://pypi.python.org/pypi/Whoosh/">Whoosh</a> was a good candidate, but it wasn't as memory efficient as I wanted <a class="footnote-reference" href="#whoosh-memory" id="id2">[2]</a>. Integrating Whoosh with Google App Engine also looked error-prone. After looking around some more and not finding anything super useable, I decided to try something crazy.</p>
<p>I decided to build my own pure-Python spell checker.</p>
<img alt="Wait, what?" class="small-image" src="/images/wat.png" />
<p>I was expecting my mentor and others to balk at the idea (<a class="reference external" href="https://www.khanacademy.org/careers/interns">I was an intern during this time</a>). But all I received were encouraging nods, so off I went.</p>
<p>To get things up and going quickly, I chose to follow a simple brute force algorithm like the one Peter Norvig describes in <a class="reference external" href="http://norvig.com/spell-correct.html">his awesome blog post</a>. Soon I had something running that worked well and was super fast. There was a problem though.</p>
<p>Storing our English words in a Python <tt class="docutils literal">dict</tt> consumed about 18 MB of space <a class="footnote-reference" href="#benchmarking" id="id3">[3]</a>. Since my hope was that this code could run on all our frontend instances and work for all languages <a class="footnote-reference" href="#premature" id="id4">[4]</a>, our infrastructure team and I weren't super excited by this.</p>
<img alt="Oh hell no." class="small-image" src="/images/oh-hell-no.gif" />
<p>To reduce memory I first tried using <a class="reference external" href="https://docs.python.org/2/library/array.html">Python's array module</a> to build my own immutable hash table. This did indeed bring our memory usage down but made spellchecking take several seconds per query.</p>
<p>I found that the loss of speed came from doing way more things in Python code instead of CPython's super-fast <tt class="docutils literal">dict</tt> implementation. This ruled out improving the performance through clever data structures. So I had to give up on my plans for an awesome <a class="reference external" href="http://stevehanov.ca/blog/index.php?id=120">succinct trie</a> implementation and instead go hunting through the standard library to find the best native solution available.</p>
<p>Thus I arrived at the binary search implementation in the <a class="reference external" href="https://docs.python.org/2/library/bisect.html">bisect module</a> of Python's standard library.</p>
<p>The idea is simple. Store a hash of each word in a sorted array and then do binary search on that array. The hashes are small and can be tightly packed in less than 2 MB. Binary search is fast and allows the spell checking algorithm to service any query.</p>
<p>Best of all, it works.</p>
<img alt="Screenshot of the spell checker working on Khan Academy" src="/images/khan-academy-correction.png" />
<table class="docutils footnote" frame="void" id="reach-research" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id1">[1]</a></td><td>I found that the 28% of the least frequent 16,000 queries and 18% of the most frequent 16,000 queries had typos within edit distance 2 of a known common word. I defined &quot;common word&quot; by creating a single dictionary from some freely licensed english dictionaries and all of Khan Academy's content. This was part of my preliminary research and was done to check that a autocorrecter was a useful feature.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="whoosh-memory" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id2">[2]</a></td><td>I came to this conclusion by auditing the code, which is (of course) not nearly as accurate as actually running benchmarks. If you're familiar with Whoosh and think I came to the wrong conclusion, please let me know.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="benchmarking" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id3">[3]</a></td><td>Once I got something working at all, I invested time into making a script that would give me metrics on our speed, memory usage, and accuracy. <a class="reference external" href="https://github.com/pympler/pympler">Pympler</a> was used to get the size of the dictionary implementations as well as the max memory usage when running the algorithm.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="premature" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id4">[4]</a></td><td>18 MB is a lot of space for our frontend instances, but we could've spared it. I never ended up adding support for other languages, so I think it would have been reasonable to just ship with the native <tt class="docutils literal">dict</tt>. The time to optimize should have been when I was adding support for other languages.</td></tr>
</tbody>
</table>
</div>

    </div>
    <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-51104787-1', 'johncs.com');
        ga('send', 'pageview');
    </script>
</body>
</html>
