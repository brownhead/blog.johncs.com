<!DOCTYPE html>
<html>
<head>
    <title>Haskell monads and the nest of lies - blog.johncs.com</title>

    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- inject:head:css -->
    <style>*{font-family:inherit;font-size:14px;letter-spacing:0;line-height:20px}html{-webkit-text-size-adjust:100%}body{background-color:#fdf6e3;color:#657b83;font-family:monospace;padding:20px 2ch 200px 2ch}@media (max-width:46ch){body{padding-bottom:100px}}body.fonts-loading{visibility:hidden}body.fonts-loaded{font-family:"Source Code Pro",monospace}a{text-decoration:none;color:#b58900}a:hover{text-decoration:underline}.single-column-content{max-width:72ch;margin-left:auto;margin-right:auto}.block-quote-markup{color:#859900}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.nav-bar{background-color:#eee8d5;border-left:1ch solid #268bd2;border-right:1ch solid #268bd2;margin-bottom:20px;padding:0 1ch}.nav-bar ul{padding:0;margin:0;list-style:none;display:inline}.nav-bar ul li{display:inline}.nav-bar ul li:after{content:", "}.nav-bar ul li:last-child:after{content:""}.nav-bar a{color:#268bd2}img,video{background-color:#eee8d5;border-color:#eee8d5;border-style:solid;border-width:20px 2ch;box-sizing:border-box;display:block;margin-bottom:20px;margin-left:auto;margin-right:auto;max-width:60ch;width:100%}img.small-image,video.small-image{max-width:40ch}img.tiny-image,video.tiny-image{max-width:30ch}@media (min-width:80ch){.floating-head{float:left;margin-right:2ch}}ol,p,ul{margin:0 0 20px 0}.code{color:#586e75}.code .c{color:#93a1a1}.code .err{color:#586e75}.code .g{color:#586e75}.code .k{color:#859900}.code .l{color:#586e75}.code .n{color:#586e75}.code .o{color:#859900}.code .x{color:#cb4b16}.code .p{color:#586e75}.code .cm{color:#93a1a1}.code .cp{color:#859900}.code .c1{color:#93a1a1}.code .cs{color:#859900}.code .gd{color:#2aa198}.code .ge{color:#586e75;font-style:italic}.code .gr{color:#dc322f}.code .gh{color:#cb4b16}.code .gi{color:#859900}.code .go{color:#586e75}.code .gp{color:#586e75}.code .gs{color:#586e75;font-weight:700}.code .gu{color:#cb4b16}.code .gt{color:#586e75}.code .kc{color:#cb4b16}.code .kd{color:#268bd2}.code .kn{color:#859900}.code .kp{color:#859900}.code .kr{color:#268bd2}.code .kt{color:#dc322f}.code .ld{color:#586e75}.code .m{color:#2aa198}.code .s{color:#2aa198}.code .na{color:#586e75}.code .nb{color:#b58900}.code .nc{color:#268bd2}.code .no{color:#cb4b16}.code .nd{color:#268bd2}.code .ni{color:#cb4b16}.code .ne{color:#cb4b16}.code .nf{color:#268bd2}.code .nl{color:#586e75}.code .nn{color:#586e75}.code .nx{color:#586e75}.code .py{color:#586e75}.code .nt{color:#268bd2}.code .nv{color:#268bd2}.code .ow{color:#859900}.code .w{color:#586e75}.code .mf{color:#2aa198}.code .mh{color:#2aa198}.code .mi{color:#2aa198}.code .mo{color:#2aa198}.code .sb{color:#93a1a1}.code .sc{color:#2aa198}.code .sd{color:#586e75}.code .s2{color:#2aa198}.code .se{color:#cb4b16}.code .sh{color:#586e75}.code .si{color:#2aa198}.code .sx{color:#2aa198}.code .sr{color:#dc322f}.code .s1{color:#2aa198}.code .ss{color:#2aa198}.code .bp{color:#268bd2}.code .vc{color:#268bd2}.code .vg{color:#268bd2}.code .vi{color:#268bd2}.code .il{color:#2aa198}.post-body ol,.post-body ul{list-style:none;padding:0}.post-body ol>li{counter-increment:item;padding-left:4ch;position:relative}.post-body ol>li:before{color:#859900;content:counter(item) ".";display:inline-block;left:0;padding:0 1ch;position:absolute}.post-body ul>li{padding-left:3ch;position:relative}.post-body ul>li:before{color:#859900;content:"*";display:inline-block;left:0;padding:0 1ch;position:absolute}.post-body .red-bold{color:#dc322f}.post-body .rounded-40{border-radius:40px}.post-body table.footnote td{padding:0;margin:0}.post-body table.footnote td.label{padding-right:1ch}.post-body table.docutils{border-collapse:collapse;margin:20px 0}.post-body table.docutils td,.post-body table.docutils th{text-align:left;padding:0 3ch 0 0}.post-body table.docutils,.post-body table.docutils td,.post-body table.docutils th{border:0}.post-body .literal{font-weight:300}.post-body pre{padding:0 0 0 4ch;white-space:pre-wrap}.post-body h2,.post-body h3,.post-body h4,.post-body h5,.post-body h6{font-weight:600;margin:0 0 20px 0}.post-body h2 *,.post-body h3 *,.post-body h4 *,.post-body h5 *,.post-body h6 *{font-weight:600}.post-body em,.post-body i{font-style:normal;font-weight:600}.nav-bar .post-date{font-weight:300;color:#6c71c4}</style>
    <!-- endinject -->
</head>
<body class="single-column-content">
    <script>
        if (!(sessionStorage && sessionStorage.getItem &&
                sessionStorage.getItem("fontLoadingResult") === "fail")) {
            document.body.className += " fonts-loading"
        }
    </script>
    <header class="nav-bar">
        <a href="/">blog.johncs.com</a>: <a href="../blog-index.htm">Posts</a> &gt; Haskell monads and the nest of lies <span class="post-date">[05/03/2019]</span>
    </header>
    <div class="post-body">
        <div class="document">
<p>The <tt class="docutils literal">IO</tt> monad in Haskell works by assuming our universe is in a simulation and that your tiny computer can capture the entire state of the universe and play it forwards in real time.</p>
<p>This is of course a lie, but I'm not the one doing the lying. In the purely functional world of Haskell (separate from the imperative world of processors), this is exactly how the IO monad is supposed to work.</p>
<p>Bear with me for a sec.</p>
<div class="section" id="the-abstraction-we-all-know-and-love">
<h2><span aria-hidden="true">##</span> The Abstraction We All Know and Love</h2>
<p>You've probably heard that the <tt class="docutils literal">IO</tt> monad represents an action to be executed later. Here's a paragraph from <a class="reference external" href="http://learnyouahaskell.com/input-and-output">Learn You a Haskell for Great Good!</a> saying exactly that:</p>
<p>&gt; We can read the type of putStrLn like this: putStrLn takes a string and returns an I/O action that has a result type of () […] An I/O action is something that, when performed, will carry out an action with a side-effect […] and will also contain some kind of return value inside it.</p>
<p>This might be the extent of your understanding of the <tt class="docutils literal">IO</tt> monad and that's totally fine. It's fairly serviceable abstraction: <tt class="docutils literal">IO a</tt> is a reference to a function, and that function returns a value of type <tt class="docutils literal">a</tt>. Cool cool, great great.</p>
</div>
<div class="section" id="the-sky-darkens-thunder-clashes">
<h2><span aria-hidden="true">##</span> The Sky Darkens, Thunder Clashes</h2>
<p>But hold on a sec, if <tt class="docutils literal">IO a</tt> is a reference to a function, what parameters does the function take? If it doesn't take any parameters, wouldn't any two <tt class="docutils literal">IO String</tt> references be equivalent? We are pure and fancy and Haskell isn't supposed to let a function return different things if it's given the same arguments. So how can two <tt class="docutils literal">getLine</tt> calls return two different things?</p>
<p>Well there is a parameter, and it's really weird: <tt class="docutils literal">IO a</tt> expands out to essentially <tt class="docutils literal">World <span class="pre">-&gt;</span> (World, a)</tt>.</p>
<p>What is this <tt class="docutils literal">World</tt> type you ask? Well it's that thing I mentioned in the first sentence of this blog post: a snapshot of the entire universe including the user, the computer its running on, and the small hamster at the center of the sun.</p>
</div>
<div class="section" id="don-t-call-me-surely">
<h2><span aria-hidden="true">##</span> Don't Call Me Surely</h2>
<p>This solves everything very cleanly.</p>
<p>Now when the program <tt class="docutils literal">main = getLine &gt;&gt;= print</tt> is executed, all we have to do is grab a snapshot of the universe and play it forwards to determine what the real user is going to type in and when they're going to do so. Then we can sleep for a bit while the user finishes typing (we of course don't have to actually listen for those keystrokes, since our simulated user already gave us all the information we need), and then print out what the user types once they hit enter.</p>
<p>Easy peasy.</p>
</div>
<div class="section" id="enough-fooling-around-what-is-it-actually">
<h2><span aria-hidden="true">##</span> Enough Fooling Around What Is It Actually?</h2>
<p>So this is truly what <tt class="docutils literal">World</tt> represents but it's a representation designed to trick the optimizer. Haskell <em>does</em> guarentee that two invocations of the same function with the same arguments will return the same value. We therefore need to fabricate an argument, otherwise Haskells optimizer can replace two such invocations with a single one.</p>
<p>&quot;The world&quot; is the fabricated argument. We pass it around from <tt class="docutils literal">IO</tt> function to <tt class="docutils literal">IO</tt> function, Haskell's optimizer can't be sure that one call to <tt class="docutils literal">getLine</tt> is going to get the same <tt class="docutils literal">World</tt> value as another call (it thinks it might be changing as we &quot;play the simulation forward&quot;), and so it's forced to leave them as separate invocations.</p>
<p>Once our code has made it through the optimizer we actually go and discard the <tt class="docutils literal">World</tt> value though, and instead just make boring syscalls to get input from the user, print stuff to the terminal, or what have you.</p>
<p><a class="reference external" href="http://homepages.inf.ed.ac.uk/wadler/papers/imperative/imperative.ps">The paper that first introduced the IO monad</a> actually does a great job explaining way the <tt class="docutils literal">World</tt> value is necessary, and I thoroughly encourage you to read it.</p>
<p>In fact, I'm not going to go into the nitty gritty because that paper does a good job. Therefore… bye!</p>
</div>
</div>

    </div>
    <div class="post-footer">
        <br>--<br><br>
        <a href="/blog-index.htm">« more posts</a> | follow me via <a href="https://twitter.com/itsjohncs">twitter</a>, or <a href="/rss.xml">RSS</a>
    </div>
    <link href='https://fonts.googleapis.com/css?family=Source+Code+Pro:300,400,600' rel='stylesheet' type='text/css'>
    <!-- inject:body-end:javascript -->
    <script>// Promise Polyfill
(function(){'use strict';var f,g=[];function l(a){g.push(a);1==g.length&&f()}function m(){for(;g.length;)g[0](),g.shift()}f=function(){setTimeout(m)};function n(a){this.a=p;this.b=void 0;this.f=[];var b=this;try{a(function(a){q(b,a)},function(a){r(b,a)})}catch(c){r(b,c)}}var p=2;function t(a){return new n(function(b,c){c(a)})}function u(a){return new n(function(b){b(a)})}function q(a,b){if(a.a==p){if(b==a)throw new TypeError;var c=!1;try{var d=b&&b.then;if(null!=b&&"object"==typeof b&&"function"==typeof d){d.call(b,function(b){c||q(a,b);c=!0},function(b){c||r(a,b);c=!0});return}}catch(e){c||r(a,e);return}a.a=0;a.b=b;v(a)}}
function r(a,b){if(a.a==p){if(b==a)throw new TypeError;a.a=1;a.b=b;v(a)}}function v(a){l(function(){if(a.a!=p)for(;a.f.length;){var b=a.f.shift(),c=b[0],d=b[1],e=b[2],b=b[3];try{0==a.a?"function"==typeof c?e(c.call(void 0,a.b)):e(a.b):1==a.a&&("function"==typeof d?e(d.call(void 0,a.b)):b(a.b))}catch(h){b(h)}}})}n.prototype.g=function(a){return this.c(void 0,a)};n.prototype.c=function(a,b){var c=this;return new n(function(d,e){c.f.push([a,b,d,e]);v(c)})};
function w(a){return new n(function(b,c){function d(c){return function(d){h[c]=d;e+=1;e==a.length&&b(h)}}var e=0,h=[];0==a.length&&b(h);for(var k=0;k<a.length;k+=1)u(a[k]).c(d(k),c)})}function x(a){return new n(function(b,c){for(var d=0;d<a.length;d+=1)u(a[d]).c(b,c)})};window.Promise||(window.Promise=n,window.Promise.resolve=u,window.Promise.reject=t,window.Promise.race=x,window.Promise.all=w,window.Promise.prototype.then=n.prototype.c,window.Promise.prototype["catch"]=n.prototype.g);}());

// Font Face Observer https://github.com/bramstein/fontfaceobserver
(function(){function l(a,b){document.addEventListener?a.addEventListener("scroll",b,!1):a.attachEvent("scroll",b)}function m(a){document.body?a():document.addEventListener?document.addEventListener("DOMContentLoaded",function c(){document.removeEventListener("DOMContentLoaded",c);a()}):document.attachEvent("onreadystatechange",function k(){if("interactive"==document.readyState||"complete"==document.readyState)document.detachEvent("onreadystatechange",k),a()})};function q(a){this.a=document.createElement("div");this.a.setAttribute("aria-hidden","true");this.a.appendChild(document.createTextNode(a));this.b=document.createElement("span");this.c=document.createElement("span");this.h=document.createElement("span");this.f=document.createElement("span");this.g=-1;this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";this.b.appendChild(this.h);this.c.appendChild(this.f);this.a.appendChild(this.b);this.a.appendChild(this.c)}
function w(a,b){a.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;left:-999px;white-space:nowrap;font:"+b+";"}function x(a){var b=a.a.offsetWidth,c=b+100;a.f.style.width=c+"px";a.c.scrollLeft=c;a.b.scrollLeft=a.b.scrollWidth+100;return a.g!==b?(a.g=b,!0):!1}function z(a,b){function c(){var a=k;x(a)&&null!==a.a.parentNode&&b(a.g)}var k=a;l(a.b,c);l(a.c,c);x(a)};function A(a,b){var c=b||{};this.family=a;this.style=c.style||"normal";this.weight=c.weight||"normal";this.stretch=c.stretch||"normal"}var B=null,C=null,D=null;function H(){if(null===C){var a=document.createElement("div");try{a.style.font="condensed 100px sans-serif"}catch(b){}C=""!==a.style.font}return C}function I(a,b){return[a.style,a.weight,H()?a.stretch:"","100px",b].join(" ")}
A.prototype.load=function(a,b){var c=this,k=a||"BESbswy",y=b||3E3,E=(new Date).getTime();return new Promise(function(a,b){null===D&&(D=!!window.FontFace);if(D){var J=new Promise(function(a,b){function e(){(new Date).getTime()-E>=y?b():document.fonts.load(I(c,c.family),k).then(function(c){1<=c.length?a():setTimeout(e,25)},function(){b()})}e()}),K=new Promise(function(a,c){setTimeout(c,y)});Promise.race([K,J]).then(function(){a(c)},function(){b(c)})}else m(function(){function r(){var b;if(b=-1!=f&&
-1!=g||-1!=f&&-1!=h||-1!=g&&-1!=h)(b=f!=g&&f!=h&&g!=h)||(null===B&&(b=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),B=!!b&&(536>parseInt(b[1],10)||536===parseInt(b[1],10)&&11>=parseInt(b[2],10))),b=B&&(f==t&&g==t&&h==t||f==u&&g==u&&h==u||f==v&&g==v&&h==v)),b=!b;b&&(null!==d.parentNode&&d.parentNode.removeChild(d),clearTimeout(G),a(c))}function F(){if((new Date).getTime()-E>=y)null!==d.parentNode&&d.parentNode.removeChild(d),b(c);else{var a=document.hidden;if(!0===a||void 0===
a)f=e.a.offsetWidth,g=n.a.offsetWidth,h=p.a.offsetWidth,r();G=setTimeout(F,50)}}var e=new q(k),n=new q(k),p=new q(k),f=-1,g=-1,h=-1,t=-1,u=-1,v=-1,d=document.createElement("div"),G=0;d.dir="ltr";w(e,I(c,"sans-serif"));w(n,I(c,"serif"));w(p,I(c,"monospace"));d.appendChild(e.a);d.appendChild(n.a);d.appendChild(p.a);document.body.appendChild(d);t=e.a.offsetWidth;u=n.a.offsetWidth;v=p.a.offsetWidth;F();z(e,function(a){f=a;r()});w(e,I(c,'"'+c.family+'",sans-serif'));z(n,function(a){g=a;r()});w(n,I(c,'"'+
c.family+'",serif'));z(p,function(a){h=a;r()});w(p,I(c,'"'+c.family+'",monospace'))})})};"undefined"!==typeof module?module.exports=A:(window.FontFaceObserver=A,window.FontFaceObserver.prototype.load=A.prototype.load);}());

// Use that observer to enable the web fonts once they're loaded
var fonts = [
    (new FontFaceObserver("Source Code Pro", {weight: 300})).load(),
    (new FontFaceObserver("Source Code Pro", {weight: 400})).load(),
    (new FontFaceObserver("Source Code Pro", {weight: 600})).load(),
];

Promise.all(fonts).then(function() {
    document.body.className = document.body.className.replace(/fonts-loading/, "fonts-loaded");
}, function() {
	document.body.className = document.body.className.replace(/fonts-loading/, "");

	if (sessionStorage && sessionStorage.setItem) {
		sessionStorage.setItem("fontLoadingResult", "fail");
	}
});

(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-51104787-4', 'johncs.com');
ga('send', 'pageview');
</script>
    <!-- endinject -->
</body>
</html>
