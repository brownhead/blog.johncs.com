<!DOCTYPE html>
<html>
<head>
    <title>John CS - Intelligently Shortening Text</title>

    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- inject:head:css -->
    <style>* {
  font-family: inherit;
  font-size: 14px;
  letter-spacing: 0;
  line-height: 20px;
}
html {
  -webkit-text-size-adjust: 100%;
}
body {
  background-color: #fdf6e3;
  color: #657b83;
  font-family: monospace;
  padding: 20px 2ch 200px 2ch;
}
@media (max-width: 46ch) {
  body {
    padding-bottom: 100px;
  }
}
body.fonts-loading {
  visibility: hidden;
}
body.fonts-loaded {
  font-family: "Source Code Pro", monospace;
}
a {
  text-decoration: none;
  color: #b58900;
}
a:hover {
  text-decoration: underline;
}
.single-column-content {
  max-width: 72ch;
  margin-left: auto;
  margin-right: auto;
}
.block-quote-markup {
  color: #859900;
}
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}
tt {
  font-weight: 300;
}
.nav-bar {
  background-color: #eee8d5;
  border-left: 1ch solid #268bd2;
  border-right: 1ch solid #268bd2;
  margin-bottom: 20px;
  padding: 0 1ch;
}
.nav-bar ul {
  padding: 0;
  margin: 0;
  list-style: none;
  display: inline;
}
.nav-bar ul li {
  display: inline;
}
.nav-bar ul li:after {
  content: ", ";
}
.nav-bar ul li:last-child:after {
  content: "";
}
.nav-bar a {
  color: #268bd2;
}
img {
  background-color: #eee8d5;
  border-color: #eee8d5;
  border-style: solid;
  border-width: 20px 2ch;
  box-sizing: border-box;
  display: block;
  margin-bottom: 20px;
  margin-left: auto;
  margin-right: auto;
  max-width: 60ch;
  width: 100%;
}
img.small-image {
  max-width: 40ch;
}
img.tiny-image {
  max-width: 30ch;
}
@media (min-width: 80ch) {
  .floating-head {
    float: left;
    margin-right: 2ch;
  }
}
p,
ol,
ul {
  margin: 0 0 20px 0;
}
/* Solarized Light 

For use with Jekyll and Pygments

http://ethanschoonover.com/solarized

SOLARIZED HEX      ROLE
--------- -------- ------------------------------------------
base01    #586e75  body text / default code / primary content
base1     #93a1a1  comments / secondary content
base3     #fdf6e3  background
orange    #cb4b16  constants
red       #dc322f  regex, special keywords
blue      #268bd2  reserved keywords
cyan      #2aa198  strings, numbers
green     #859900  operators, other keywords
*/
.code {
  color: #586e75;
  /* Comment */
  /* Error */
  /* Generic */
  /* Keyword */
  /* Literal */
  /* Name */
  /* Operator */
  /* Other */
  /* Punctuation */
  /* Comment.Multiline */
  /* Comment.Preproc */
  /* Comment.Single */
  /* Comment.Special */
  /* Generic.Deleted */
  /* Generic.Emph */
  /* Generic.Error */
  /* Generic.Heading */
  /* Generic.Inserted */
  /* Generic.Output */
  /* Generic.Prompt */
  /* Generic.Strong */
  /* Generic.Subheading */
  /* Generic.Traceback */
  /* Keyword.Constant */
  /* Keyword.Declaration */
  /* Keyword.Namespace */
  /* Keyword.Pseudo */
  /* Keyword.Reserved */
  /* Keyword.Type */
  /* Literal.Date */
  /* Literal.Number */
  /* Literal.String */
  /* Name.Attribute */
  /* Name.Builtin */
  /* Name.Class */
  /* Name.Constant */
  /* Name.Decorator */
  /* Name.Entity */
  /* Name.Exception */
  /* Name.Function */
  /* Name.Label */
  /* Name.Namespace */
  /* Name.Other */
  /* Name.Property */
  /* Name.Tag */
  /* Name.Variable */
  /* Operator.Word */
  /* Text.Whitespace */
  /* Literal.Number.Float */
  /* Literal.Number.Hex */
  /* Literal.Number.Integer */
  /* Literal.Number.Oct */
  /* Literal.String.Backtick */
  /* Literal.String.Char */
  /* Literal.String.Doc */
  /* Literal.String.Double */
  /* Literal.String.Escape */
  /* Literal.String.Heredoc */
  /* Literal.String.Interpol */
  /* Literal.String.Other */
  /* Literal.String.Regex */
  /* Literal.String.Single */
  /* Literal.String.Symbol */
  /* Name.Builtin.Pseudo */
  /* Name.Variable.Class */
  /* Name.Variable.Global */
  /* Name.Variable.Instance */
  /* Literal.Number.Integer.Long */
}
.code .c {
  color: #93a1a1;
}
.code .err {
  color: #586e75;
}
.code .g {
  color: #586e75;
}
.code .k {
  color: #859900;
}
.code .l {
  color: #586e75;
}
.code .n {
  color: #586e75;
}
.code .o {
  color: #859900;
}
.code .x {
  color: #cb4b16;
}
.code .p {
  color: #586e75;
}
.code .cm {
  color: #93a1a1;
}
.code .cp {
  color: #859900;
}
.code .c1 {
  color: #93a1a1;
}
.code .cs {
  color: #859900;
}
.code .gd {
  color: #2aa198;
}
.code .ge {
  color: #586e75;
  font-style: italic;
}
.code .gr {
  color: #dc322f;
}
.code .gh {
  color: #cb4b16;
}
.code .gi {
  color: #859900;
}
.code .go {
  color: #586e75;
}
.code .gp {
  color: #586e75;
}
.code .gs {
  color: #586e75;
  font-weight: bold;
}
.code .gu {
  color: #cb4b16;
}
.code .gt {
  color: #586e75;
}
.code .kc {
  color: #cb4b16;
}
.code .kd {
  color: #268bd2;
}
.code .kn {
  color: #859900;
}
.code .kp {
  color: #859900;
}
.code .kr {
  color: #268bd2;
}
.code .kt {
  color: #dc322f;
}
.code .ld {
  color: #586e75;
}
.code .m {
  color: #2aa198;
}
.code .s {
  color: #2aa198;
}
.code .na {
  color: #586e75;
}
.code .nb {
  color: #B58900;
}
.code .nc {
  color: #268bd2;
}
.code .no {
  color: #cb4b16;
}
.code .nd {
  color: #268bd2;
}
.code .ni {
  color: #cb4b16;
}
.code .ne {
  color: #cb4b16;
}
.code .nf {
  color: #268bd2;
}
.code .nl {
  color: #586e75;
}
.code .nn {
  color: #586e75;
}
.code .nx {
  color: #586e75;
}
.code .py {
  color: #586e75;
}
.code .nt {
  color: #268bd2;
}
.code .nv {
  color: #268bd2;
}
.code .ow {
  color: #859900;
}
.code .w {
  color: #586e75;
}
.code .mf {
  color: #2aa198;
}
.code .mh {
  color: #2aa198;
}
.code .mi {
  color: #2aa198;
}
.code .mo {
  color: #2aa198;
}
.code .sb {
  color: #93a1a1;
}
.code .sc {
  color: #2aa198;
}
.code .sd {
  color: #586e75;
}
.code .s2 {
  color: #2aa198;
}
.code .se {
  color: #cb4b16;
}
.code .sh {
  color: #586e75;
}
.code .si {
  color: #2aa198;
}
.code .sx {
  color: #2aa198;
}
.code .sr {
  color: #dc322f;
}
.code .s1 {
  color: #2aa198;
}
.code .ss {
  color: #2aa198;
}
.code .bp {
  color: #268bd2;
}
.code .vc {
  color: #268bd2;
}
.code .vg {
  color: #268bd2;
}
.code .vi {
  color: #268bd2;
}
.code .il {
  color: #2aa198;
}
.post-body ol,
.post-body ul {
  list-style: none;
  padding: 0;
}
.post-body ol > li {
  counter-increment: item;
  padding-left: 4ch;
  position: relative;
}
.post-body ol > li:before {
  color: #859900;
  content: counter(item) ".";
  display: inline-block;
  left: 0;
  padding: 0 1ch;
  position: absolute;
}
.post-body ul > li {
  padding-left: 3ch;
  position: relative;
}
.post-body ul > li:before {
  color: #859900;
  content: "*";
  display: inline-block;
  left: 0;
  padding: 0 1ch;
  position: absolute;
}
.post-body .red-bold {
  color: #DC322F;
}
.post-body .rounded-40 {
  border-radius: 40px;
}
.post-body table.footnote td {
  padding: 0;
  margin: 0;
}
.post-body table.footnote td.label {
  padding-right: 1ch;
}
.post-body tt,
.post-body pre {
  font-weight: 300;
}
.post-body tt b,
.post-body pre b,
.post-body tt strong,
.post-body pre strong {
  font-weight: normal;
}
.post-body pre {
  padding: 0 0 0 4ch;
  white-space: pre-wrap;
}
.post-body h2,
.post-body h3,
.post-body h4,
.post-body h5,
.post-body h6 {
  font-weight: 600;
}
.post-body h2 *,
.post-body h3 *,
.post-body h4 *,
.post-body h5 *,
.post-body h6 * {
  font-weight: 600;
}
.post-body em,
.post-body i {
  font-style: normal;
  font-weight: 600;
}
.nav-bar .post-date {
  font-weight: 300;
  color: #6c71c4;
}
</style>
    <!-- endinject -->
</head>
<body class="single-column-content">
    <script>
        if (!(sessionStorage && sessionStorage.getItem &&
                sessionStorage.getItem("fontLoadingResult") === "fail")) {
            document.body.className += " fonts-loading"
        }
    </script>
    <header class="nav-bar">
        <a href="/">John CS</a> &gt; <a href="../blog-index.htm">Blog</a> &gt; Intelligently Shortening Text <span class="post-date">[05/18/2014]</span>
    </header>
    <div class="post-body">
        <div class="document">
<p>Our search page at Khan Academy displays highlighting information to provide context for our results. Our full-text search engine gives us the highlighting text, but it doesn't provide a way to reliably control the length of the text. The end result can be undesirable. Check out this screenshot of our search page:</p>
<img alt="A screenshot of Khan Academy's search results." src="/images/highlighting_before.png" />
<p>6 lines of text for a single result might be too much... Shrinking it in such a way that the highlighting is still useful is difficult though. To get a clearer idea of the problem, let's poke at some example text:</p>
<pre class="literal-block">
From this experiment we can make a key observation: The values in each of the slices are equal to the the label on the slice, plus or minus some <strong>multiple</strong> of C. This means the difference between any two values in a slice is some <strong>multiple</strong> of C.
</pre>
<p>This is too large for us to display directly to the user, but how could we shorten it?</p>
<p>To start off, let's say that 125 characters is our &quot;optimal&quot; length (I chose that pretty arbitrarily). Let's also say that anything less than 80 characters is probably too short, and anything more than 150 is too long. With those numbers in mind, what do you think the optimal shortened version of the above text is?</p>
<p>I'd say the second part of the first sentence, after the colon, because it's close to the target length, it has a highlighted term in it, and it's an entire thought.</p>
<pre class="literal-block">
The values in each of the slices are equal to the the label on the slice, plus or minus some <strong>multiple</strong> of C.
</pre>
<p>A way we could figure this out is by first creating a list of &quot;stop points&quot; in the text. We want these stop points to be the beginning of a clause, but since that's a hard thing to detect in code we can approximate it by declaring that stop points are the first alphanumeric character after a non-alphanumeric character and some whitespace. We'll also say that the beginning and end of the text are stop points.</p>
<p>So if we annotated the stop points in our example text we'd get:</p>
<pre class="literal-block">
<span class="red-bold">|</span>From this experiment we can make a key observation: <span class="red-bold">|</span>The values in each of the slices are equal to the the label on the slice, <span class="red-bold">|</span>plus or minus some <strong>multiple</strong> of C. <span class="red-bold">|</span>This means the difference between any two values in a slice is some <strong>multiple</strong> of C.<span class="red-bold">|</span>
</pre>
<p>Each stop point represents a possible start or end point for our result. So our search space is just every combination of two stop points. Some strings we will look at include:</p>
<ul class="simple">
<li><tt class="docutils literal">From this experiment we can make a key observation:</tt></li>
<li><tt class="docutils literal">The values in each of the slices are equal to the label on the slice,</tt></li>
<li><span class="raw-html"><tt>The values in each of the slices are equal to the label on the slice, plus or minus some <b>multiple</b> of C.</tt></span></li>
</ul>
<p>The total number of strings we'll look at can be calculated by evaluating <tt class="docutils literal">X choose 2</tt> (where <tt class="docutils literal">X</tt> is the number of stop points). So in our case, we have <tt class="docutils literal">5 choose 2</tt> which is 10.</p>
<p>Not all stop points are created equal however (as you may have noticed). We'd prefer to stop at the end of a sentence than in the middle of one for example. To represent this notion, we have the idea of &quot;preferred&quot; stop points. Since it's also difficult to detect the ends of sentences, we'll say a preferred stop point is one with a capital letter following it. The beginning and end of the text are also preferred.</p>
<p>So if we annotated only the preferred stop points in our example text we'd get:</p>
<pre class="literal-block">
<span class="red-bold">|</span>From this experiment we can make a key observation: <span class="red-bold">|</span>The values in each of the slices are equal to the the label on the slice, plus or minus some <strong>multiple</strong> of C. <span class="red-bold">|</span>This means the difference between any two values in a slice is some <strong>multiple</strong> of C.<span class="red-bold">|</span>
</pre>
<p>Now that we have our vocab in place, we can find our answer. To do so, we'll look at each string in our search space and throw out every string that is outside of our min and max lengths (which we set at 80 and 150 earlier). This leaves us with:</p>
<ul class="simple">
<li><tt class="docutils literal">From this experiment we can make a key observation: The values in each of the slices are equal to the the label on the slice,</tt></li>
<li><span class="raw-html"><tt>The values in each of the slices are equal to the the label on the slice, plus or minus some <b>multiple</b> of C.</tt></span></li>
<li><span class="raw-html"><tt>This means the difference between any two values in a slice is some <b>multiple</b> of C.</tt></span></li>
<li><span class="raw-html"><tt>plus or minus some <b>multiple</b> of C. This means the difference between any two values in a slice is some <b>multiple</b> of C.</tt></span></li>
</ul>
<p>Next, we can throw out any string that doesn't include a highlighted term leaving us with:</p>
<ul class="simple">
<li><span class="raw-html"><tt>The values in each of the slices are equal to the the label on the slice, plus or minus some <b>multiple</b> of C.</tt></span></li>
<li><span class="raw-html"><tt>This means the difference between any two values in a slice is some <b>multiple</b> of C.</tt></span></li>
<li><span class="raw-html"><tt>plus or minus some <b>multiple</b> of C. This means the difference between any two values in a slice is some <b>multiple</b> of C.</tt></span></li>
</ul>
<p>Finally, we take all of the strings that remain and rank them. We'll rank first on the preferred-ness of the stop points at each end of the result, and then on the proximity of the string's length to the target length.</p>
<p>Regarding the preferred-ness, we'll say that a result with two preferred stop points ranks highest, a result with a single preferred stop point at the beginning is ranked second highest, a result with a single preferred stop point at the end is ranked third highest, and a result with no preferred stop points is ranked fourth highest (aka last).</p>
<p>The first two results have preferred stop points at both ends, so the only thing differentiating them are the lengths, which are 107 and 82 respectively. Since 107 is closest to out target of 125, our final result is:</p>
<pre class="literal-block">
The values in each of the slices are equal to the the label on the slice, plus or minus some <strong>multiple</strong> of C.
</pre>
<p>This algorithm will break down under certain situations (ex: all the possible results are too short), but the edge cases end up being simple to handle. The same screenshot that we started with, when this algorithm is applied, becomes:</p>
<img alt="A screenshot of Khan Academy's search results." src="/images/highlighting_after.png" />
</div>

    </div>
    <div class="post-footer">
        <br>--<br><br>
        <a href="/blog-index.htm">« more posts</a> | follow me via <a href="https://twitter.com/itsjohncs">twitter</a>, or <a href="http://johncs.com/rss.xml">RSS</a>
    </div>
    <link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:300,400,600' rel='stylesheet' type='text/css'>
    <!-- inject:body-end:javascript -->
    <script>// Promise Polyfill
(function(){'use strict';var f,g=[];function l(a){g.push(a);1==g.length&&f()}function m(){for(;g.length;)g[0](),g.shift()}f=function(){setTimeout(m)};function n(a){this.a=p;this.b=void 0;this.f=[];var b=this;try{a(function(a){q(b,a)},function(a){r(b,a)})}catch(c){r(b,c)}}var p=2;function t(a){return new n(function(b,c){c(a)})}function u(a){return new n(function(b){b(a)})}function q(a,b){if(a.a==p){if(b==a)throw new TypeError;var c=!1;try{var d=b&&b.then;if(null!=b&&"object"==typeof b&&"function"==typeof d){d.call(b,function(b){c||q(a,b);c=!0},function(b){c||r(a,b);c=!0});return}}catch(e){c||r(a,e);return}a.a=0;a.b=b;v(a)}}
function r(a,b){if(a.a==p){if(b==a)throw new TypeError;a.a=1;a.b=b;v(a)}}function v(a){l(function(){if(a.a!=p)for(;a.f.length;){var b=a.f.shift(),c=b[0],d=b[1],e=b[2],b=b[3];try{0==a.a?"function"==typeof c?e(c.call(void 0,a.b)):e(a.b):1==a.a&&("function"==typeof d?e(d.call(void 0,a.b)):b(a.b))}catch(h){b(h)}}})}n.prototype.g=function(a){return this.c(void 0,a)};n.prototype.c=function(a,b){var c=this;return new n(function(d,e){c.f.push([a,b,d,e]);v(c)})};
function w(a){return new n(function(b,c){function d(c){return function(d){h[c]=d;e+=1;e==a.length&&b(h)}}var e=0,h=[];0==a.length&&b(h);for(var k=0;k<a.length;k+=1)u(a[k]).c(d(k),c)})}function x(a){return new n(function(b,c){for(var d=0;d<a.length;d+=1)u(a[d]).c(b,c)})};window.Promise||(window.Promise=n,window.Promise.resolve=u,window.Promise.reject=t,window.Promise.race=x,window.Promise.all=w,window.Promise.prototype.then=n.prototype.c,window.Promise.prototype["catch"]=n.prototype.g);}());

// Font Face Observer https://github.com/bramstein/fontfaceobserver
(function(){function l(a,b){document.addEventListener?a.addEventListener("scroll",b,!1):a.attachEvent("scroll",b)}function m(a){document.body?a():document.addEventListener?document.addEventListener("DOMContentLoaded",function c(){document.removeEventListener("DOMContentLoaded",c);a()}):document.attachEvent("onreadystatechange",function k(){if("interactive"==document.readyState||"complete"==document.readyState)document.detachEvent("onreadystatechange",k),a()})};function q(a){this.a=document.createElement("div");this.a.setAttribute("aria-hidden","true");this.a.appendChild(document.createTextNode(a));this.b=document.createElement("span");this.c=document.createElement("span");this.h=document.createElement("span");this.f=document.createElement("span");this.g=-1;this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";this.b.appendChild(this.h);this.c.appendChild(this.f);this.a.appendChild(this.b);this.a.appendChild(this.c)}
function w(a,b){a.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;left:-999px;white-space:nowrap;font:"+b+";"}function x(a){var b=a.a.offsetWidth,c=b+100;a.f.style.width=c+"px";a.c.scrollLeft=c;a.b.scrollLeft=a.b.scrollWidth+100;return a.g!==b?(a.g=b,!0):!1}function z(a,b){function c(){var a=k;x(a)&&null!==a.a.parentNode&&b(a.g)}var k=a;l(a.b,c);l(a.c,c);x(a)};function A(a,b){var c=b||{};this.family=a;this.style=c.style||"normal";this.weight=c.weight||"normal";this.stretch=c.stretch||"normal"}var B=null,C=null,D=null;function H(){if(null===C){var a=document.createElement("div");try{a.style.font="condensed 100px sans-serif"}catch(b){}C=""!==a.style.font}return C}function I(a,b){return[a.style,a.weight,H()?a.stretch:"","100px",b].join(" ")}
A.prototype.load=function(a,b){var c=this,k=a||"BESbswy",y=b||3E3,E=(new Date).getTime();return new Promise(function(a,b){null===D&&(D=!!window.FontFace);if(D){var J=new Promise(function(a,b){function e(){(new Date).getTime()-E>=y?b():document.fonts.load(I(c,c.family),k).then(function(c){1<=c.length?a():setTimeout(e,25)},function(){b()})}e()}),K=new Promise(function(a,c){setTimeout(c,y)});Promise.race([K,J]).then(function(){a(c)},function(){b(c)})}else m(function(){function r(){var b;if(b=-1!=f&&
-1!=g||-1!=f&&-1!=h||-1!=g&&-1!=h)(b=f!=g&&f!=h&&g!=h)||(null===B&&(b=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),B=!!b&&(536>parseInt(b[1],10)||536===parseInt(b[1],10)&&11>=parseInt(b[2],10))),b=B&&(f==t&&g==t&&h==t||f==u&&g==u&&h==u||f==v&&g==v&&h==v)),b=!b;b&&(null!==d.parentNode&&d.parentNode.removeChild(d),clearTimeout(G),a(c))}function F(){if((new Date).getTime()-E>=y)null!==d.parentNode&&d.parentNode.removeChild(d),b(c);else{var a=document.hidden;if(!0===a||void 0===
a)f=e.a.offsetWidth,g=n.a.offsetWidth,h=p.a.offsetWidth,r();G=setTimeout(F,50)}}var e=new q(k),n=new q(k),p=new q(k),f=-1,g=-1,h=-1,t=-1,u=-1,v=-1,d=document.createElement("div"),G=0;d.dir="ltr";w(e,I(c,"sans-serif"));w(n,I(c,"serif"));w(p,I(c,"monospace"));d.appendChild(e.a);d.appendChild(n.a);d.appendChild(p.a);document.body.appendChild(d);t=e.a.offsetWidth;u=n.a.offsetWidth;v=p.a.offsetWidth;F();z(e,function(a){f=a;r()});w(e,I(c,'"'+c.family+'",sans-serif'));z(n,function(a){g=a;r()});w(n,I(c,'"'+
c.family+'",serif'));z(p,function(a){h=a;r()});w(p,I(c,'"'+c.family+'",monospace'))})})};"undefined"!==typeof module?module.exports=A:(window.FontFaceObserver=A,window.FontFaceObserver.prototype.load=A.prototype.load);}());

// Use that observer to enable the web fonts once they're loaded
var fonts = [
    (new FontFaceObserver("Source Code Pro", {weight: 300})).load(),
    (new FontFaceObserver("Source Code Pro", {weight: 400})).load(),
    (new FontFaceObserver("Source Code Pro", {weight: 600})).load(),
];

Promise.all(fonts).then(function() {
    document.body.className = document.body.className.replace(/fonts-loading/, "fonts-loaded");
}, function() {
	document.body.className = document.body.className.replace(/fonts-loading/, "");

	if (sessionStorage && sessionStorage.setItem) {
		sessionStorage.setItem("fontLoadingResult", "fail");
	}
});

(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-51104787-1', 'johncs.com');
ga('send', 'pageview');
</script>
    <!-- endinject -->
</body>
</html>
