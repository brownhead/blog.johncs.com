<!DOCTYPE html>
<html>
<head>
    <title>John CS - Transactions with Python's sqlite3 Package</title>

    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">

    <link href="http://fonts.googleapis.com/css?family=Open+Sans:400,600,800&subset=latin" rel="stylesheet" type="text/css">
    <link href="http://fonts.googleapis.com/css?family=Inconsolata:400,700" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="http://yui.yahooapis.com/pure/0.4.2/pure-min.css">
    <link rel="stylesheet" href="/styles.css">
    <link rel="stylesheet" href="/pygments.css">
</head>
<body id="post-page">
    <header id="top-header">
        <div id="post-title">
            <a id="site-title" href="/">John CS</a> &rarr; Transactions with Python's sqlite3 Package
        </div>
        <div id="post-metadata" class="faded">
            Posted March 5, 2014
        </div>
    </header>
    <div id="post-body">
        <div class="document">
<p>Python's <tt class="docutils literal">sqlite3</tt> package tries to take care of the tricky business of properly executing <tt class="docutils literal">BEGIN</tt> and <tt class="docutils literal">COMMIT</tt> statements. The rules of when and how this automatic transactioning is done has confounded a number of developers, many of whom have jumped ship and chosen to use the <a class="reference external" href="https://github.com/rogerbinns/apsw">aspw</a> package or similar.</p>
<p>For one reason or another I needed to use the standard libary's package for a project, so I jumped into CPython's internals to take a look at exactly how it behaves (I was specifically looking at Python 2.7's most recent code). The results are mostly ordinary with some occasional gotchas.</p>
<div class="section" id="rules-for-automatic-transactions">
<h2>Rules for Automatic Transactions</h2>
<p>By automatic transactions here I am not referring to SQLite's built-in behavior of wrapping data-changing operations in transactions. Rather, I am speaking of the Python module's special behavior where it actually executes <tt class="docutils literal">BEGIN</tt> and <tt class="docutils literal">COMMIT</tt> statements on your behalf.</p>
<p>A transaction is automatically started (ie: a <tt class="docutils literal">BEGIN</tt> is executed) when all of the following conditions are met:</p>
<ol class="arabic simple">
<li>The <tt class="docutils literal">isolation_level</tt> is not <tt class="docutils literal">None</tt>. <a class="footnote-reference" href="#isolation-level" id="id1">[1]</a></li>
<li>The Connection object thinks a transaction has not already been started.</li>
<li>An <tt class="docutils literal">UPDATE</tt>, <tt class="docutils literal">DELETE</tt>, <tt class="docutils literal">INSERT</tt>, or <tt class="docutils literal">REPLACE</tt> statement is being executed. <a class="footnote-reference" href="#transactional-statements" id="id2">[2]</a></li>
</ol>
<p>The <tt class="docutils literal">BEGIN</tt> statement will be concatenated with whatever value is in <tt class="docutils literal">isolation_level</tt>. For example, if <tt class="docutils literal">isolation_level</tt> was equal to <tt class="docutils literal">DEFERRED</tt>, the statement executed when the above conditions are met is <tt class="docutils literal">BEGIN DEFERRED</tt>.</p>
<p>A transaction is automatically ended (ie: a <tt class="docutils literal">COMMIT</tt> is executed) when all of the following conditions are met:</p>
<ol class="arabic simple">
<li>The <tt class="docutils literal">isolation_level</tt> is not <tt class="docutils literal">None</tt>. <a class="footnote-reference" href="#isolation-level" id="id3">[1]</a></li>
<li>The Connection object thinks a transaction has already been started.</li>
<li>Any statement that is not an <tt class="docutils literal">UPDATE</tt>, <tt class="docutils literal">DELETE</tt>, <tt class="docutils literal">INSERT</tt>, <tt class="docutils literal">REPLACE</tt>, or <tt class="docutils literal">SELECT</tt> is being executed. <a class="footnote-reference" href="#transactional-statements" id="id4">[2]</a></li>
</ol>
<p>The <a class="reference external" href="http://docs.python.org/2/library/sqlite3.html#sqlite3.Connection.commit">sqlite3.Connection.commit()</a> function will also send a <tt class="docutils literal">COMMIT</tt> statement as long as the Connection object thinks a transaction has already been started.</p>
</div>
<div class="section" id="how-the-connection-object-detects-transactions">
<h2>How the Connection Object Detects Transactions</h2>
<p>When the module checks to see if a transaction is in progress, it inspects the Connection's <tt class="docutils literal">inTransaction</tt> data member (which is not available from Python). This is fine and well if you're only using automatic transactions, but the module can get confused if you ever execute a <tt class="docutils literal">BEGIN</tt> statement yourself: If the version of SQLite CPython was linked with is older than 3.2.2, <a class="footnote-reference" href="#transaction-check" id="id5">[3]</a> and you've started a transaction manually by executing a <tt class="docutils literal">BEGIN</tt> statement yourself, the <tt class="docutils literal">inTransaction</tt> data member may have an incorrect value.</p>
<p>As a rule of thumb, I would advise never executing a <tt class="docutils literal">BEGIN</tt> statement manually unless you never use the <tt class="docutils literal">sqlite3.Connection.commit()</tt> function and you've set the <tt class="docutils literal">isolation_level</tt> to <tt class="docutils literal">None</tt>.</p>
<table class="docutils footnote" frame="void" id="isolation-level" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label">[1]</td><td><em>(<a class="fn-backref" href="#id1">1</a>, <a class="fn-backref" href="#id3">2</a>)</em> The <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/connection.c#l1129">pysqlite_connection_set_isolation_level()</a> function will set the connection object's <tt class="docutils literal">begin_statement</tt> member to NULL if the <tt class="docutils literal">isolation_level</tt> is set to <tt class="docutils literal">None</tt>. Inside of the <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l441">_pysqlite_query_execute()</a> function <tt class="docutils literal">begin_statement</tt> is then checked and a transaction will not be started or ended unless it is non-null.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="transactional-statements" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label">[2]</td><td><em>(<a class="fn-backref" href="#id2">1</a>, <a class="fn-backref" href="#id4">2</a>)</em> The <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l441">_pysqlite_query_execute()</a> function is responsible for executing all of the statements that are given to the module and it only starts a transaction (by calling <tt class="docutils literal">_pysqlite_connection_begin()</tt>) if the statement is one of the types mentioned.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="transaction-check" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id5">[3]</a></td><td>In <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l441">_pysqlite_query_execute()</a> there is a <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l752">preprocessor conditional</a> that conditionally enables the check, and as far as I could tell there is no explicit check to see if the user ever sends a <tt class="docutils literal">BEGIN</tt> themselves.</td></tr>
</tbody>
</table>
</div>
</div>

    </div>
    <div id="disqus_thread"></div>
    <script type="text/javascript">
        // Disqus
        var disqus_shortname = 'johncscom';
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();

        // GA
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-51104787-1', 'johncs.com');
        ga('send', 'pageview');
    </script>
</body>
</html>
