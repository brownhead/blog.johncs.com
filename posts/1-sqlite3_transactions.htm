<!DOCTYPE html>
<html>
<head>
    <title>John CS - Transactions with Python's sqlite3 Package</title>

    <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- inject:head:css -->
    <style>* {
  font-family: inherit;
  font-size: 14px;
  letter-spacing: 0;
  line-height: 20px;
}
html {
  -webkit-text-size-adjust: 100%;
}
body {
  background-color: #fdf6e3;
  color: #657b83;
  font-family: monospace;
  padding: 20px 2ch 200px 2ch;
}
@media (max-width: 46ch) {
  body {
    padding-bottom: 100px;
  }
}
body.fonts-loading {
  visibility: hidden;
}
body.fonts-loaded {
  font-family: "Source Code Pro", monospace;
}
a {
  text-decoration: none;
  color: #b58900;
}
a:hover {
  text-decoration: underline;
}
.single-column-content {
  max-width: 72ch;
  margin-left: auto;
  margin-right: auto;
}
.block-quote-markup {
  color: #859900;
}
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}
tt {
  font-weight: 300;
}
.nav-bar {
  background-color: #eee8d5;
  border-left: 1ch solid #268bd2;
  border-right: 1ch solid #268bd2;
  margin-bottom: 20px;
  padding: 0 1ch;
}
.nav-bar ul {
  padding: 0;
  margin: 0;
  list-style: none;
  display: inline;
}
.nav-bar ul li {
  display: inline;
}
.nav-bar ul li:after {
  content: ", ";
}
.nav-bar ul li:last-child:after {
  content: "";
}
.nav-bar a {
  color: #268bd2;
}
img {
  background-color: #eee8d5;
  border-color: #eee8d5;
  border-style: solid;
  border-width: 20px 2ch;
  box-sizing: border-box;
  display: block;
  margin-bottom: 20px;
  margin-left: auto;
  margin-right: auto;
  max-width: 60ch;
  width: 100%;
}
img.small-image {
  max-width: 40ch;
}
img.tiny-image {
  max-width: 30ch;
}
@media (min-width: 80ch) {
  .floating-head {
    float: left;
    margin-right: 2ch;
  }
}
p,
ol,
ul {
  margin: 0 0 20px 0;
}
.post-body ol,
.post-body ul {
  list-style: none;
  padding: 0;
}
.post-body ol > li {
  counter-increment: item;
  padding-left: 4ch;
  position: relative;
}
.post-body ol > li:before {
  color: #859900;
  content: counter(item) ".";
  display: inline-block;
  left: 0;
  padding: 0 1ch;
  position: absolute;
}
.post-body ul > li {
  padding-left: 3ch;
  position: relative;
}
.post-body ul > li:before {
  color: #859900;
  content: "*";
  display: inline-block;
  left: 0;
  padding: 0 1ch;
  position: absolute;
}
.post-body .red-bold {
  color: #DC322F;
}
.post-body .rounded-40 {
  border-radius: 40px;
}
.post-body table.footnote td {
  padding: 0;
  margin: 0;
}
.post-body table.footnote td.label {
  padding-right: 1ch;
}
.post-body tt,
.post-body pre {
  font-weight: 300;
}
.post-body tt b,
.post-body pre b,
.post-body tt strong,
.post-body pre strong {
  font-weight: normal;
}
.post-body pre {
  padding: 0 0 0 4ch;
  white-space: pre-wrap;
}
.post-body h2,
.post-body h3,
.post-body h4,
.post-body h5,
.post-body h6 {
  font-weight: 600;
}
.post-body h2 *,
.post-body h3 *,
.post-body h4 *,
.post-body h5 *,
.post-body h6 * {
  font-weight: 600;
}
.post-body em,
.post-body i {
  font-style: normal;
  font-weight: 600;
}
.nav-bar .post-date {
  font-weight: 300;
  color: #6c71c4;
}
</style>
    <!-- endinject -->
</head>
<body class="single-column-content">
    <script>
        if (!(sessionStorage && sessionStorage.getItem &&
                sessionStorage.getItem("fontLoadingResult") === "fail")) {
            document.body.className += " fonts-loading"
        }
    </script>
    <header class="nav-bar">
        <a href="/">John CS</a> &gt; <a href="../blog-index.htm">Blog</a> &gt; Transactions with Python's sqlite3 Package <span class="post-date">[03/05/2014]</span>
    </header>
    <div class="post-body">
        <div class="document">
<p>Python's <tt class="docutils literal">sqlite3</tt> package tries to take care of the tricky business of properly executing <tt class="docutils literal">BEGIN</tt> and <tt class="docutils literal">COMMIT</tt> statements. The rules of when and how this automatic transactioning is done has confounded a number of developers, many of whom have jumped ship and chosen to use the <a class="reference external" href="https://github.com/rogerbinns/apsw">aspw</a> package or similar.</p>
<p>For one reason or another I needed to use the standard libary's package for a project, so I jumped into CPython's internals to take a look at exactly how it behaves (I was specifically looking at Python 2.7's most recent code). The results are mostly ordinary with some occasional gotchas.</p>
<div class="section" id="rules-for-automatic-transactions">
<h2><span aria-hidden="true">##</span> Rules for Automatic Transactions</h2>
<p>By automatic transactions here I am not referring to SQLite's built-in behavior of wrapping data-changing operations in transactions. Rather, I am speaking of the Python module's special behavior where it actually executes <tt class="docutils literal">BEGIN</tt> and <tt class="docutils literal">COMMIT</tt> statements on your behalf.</p>
<p>A transaction is automatically started (ie: a <tt class="docutils literal">BEGIN</tt> is executed) when all of the following conditions are met:</p>
<ol class="arabic simple">
<li>The <tt class="docutils literal">isolation_level</tt> is not <tt class="docutils literal">None</tt>. <a class="footnote-reference" href="#isolation-level" id="id1">[1]</a></li>
<li>The Connection object thinks a transaction has not already been started.</li>
<li>An <tt class="docutils literal">UPDATE</tt>, <tt class="docutils literal">DELETE</tt>, <tt class="docutils literal">INSERT</tt>, or <tt class="docutils literal">REPLACE</tt> statement is being executed. <a class="footnote-reference" href="#transactional-statements" id="id2">[2]</a></li>
</ol>
<p>The <tt class="docutils literal">BEGIN</tt> statement will be concatenated with whatever value is in <tt class="docutils literal">isolation_level</tt>. For example, if <tt class="docutils literal">isolation_level</tt> was equal to <tt class="docutils literal">DEFERRED</tt>, the statement executed when the above conditions are met is <tt class="docutils literal">BEGIN DEFERRED</tt>.</p>
<p>A transaction is automatically ended (ie: a <tt class="docutils literal">COMMIT</tt> is executed) when all of the following conditions are met:</p>
<ol class="arabic simple">
<li>The <tt class="docutils literal">isolation_level</tt> is not <tt class="docutils literal">None</tt>. <a class="footnote-reference" href="#isolation-level" id="id3">[1]</a></li>
<li>The Connection object thinks a transaction has already been started.</li>
<li>Any statement that is not an <tt class="docutils literal">UPDATE</tt>, <tt class="docutils literal">DELETE</tt>, <tt class="docutils literal">INSERT</tt>, <tt class="docutils literal">REPLACE</tt>, or <tt class="docutils literal">SELECT</tt> is being executed. <a class="footnote-reference" href="#transactional-statements" id="id4">[2]</a></li>
</ol>
<p>The <a class="reference external" href="http://docs.python.org/2/library/sqlite3.html#sqlite3.Connection.commit">sqlite3.Connection.commit()</a> function will also send a <tt class="docutils literal">COMMIT</tt> statement as long as the Connection object thinks a transaction has already been started.</p>
</div>
<div class="section" id="how-the-connection-object-detects-transactions">
<h2><span aria-hidden="true">##</span> How the Connection Object Detects Transactions</h2>
<p>When the module checks to see if a transaction is in progress, it inspects the Connection's <tt class="docutils literal">inTransaction</tt> data member (which is not available from Python). This is fine and well if you're only using automatic transactions, but the module can get confused if you ever execute a <tt class="docutils literal">BEGIN</tt> statement yourself: If the version of SQLite CPython was linked with is older than 3.2.2, <a class="footnote-reference" href="#transaction-check" id="id5">[3]</a> and you've started a transaction manually by executing a <tt class="docutils literal">BEGIN</tt> statement yourself, the <tt class="docutils literal">inTransaction</tt> data member may have an incorrect value.</p>
<p>As a rule of thumb, I would advise never executing a <tt class="docutils literal">BEGIN</tt> statement manually unless you never use the <tt class="docutils literal">sqlite3.Connection.commit()</tt> function and you've set the <tt class="docutils literal">isolation_level</tt> to <tt class="docutils literal">None</tt>.</p>
<table class="docutils footnote" frame="void" id="isolation-level" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label">[1]</td><td><em>(<a class="fn-backref" href="#id1">1</a>, <a class="fn-backref" href="#id3">2</a>)</em> The <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/connection.c#l1129">pysqlite_connection_set_isolation_level()</a> function will set the connection object's <tt class="docutils literal">begin_statement</tt> member to NULL if the <tt class="docutils literal">isolation_level</tt> is set to <tt class="docutils literal">None</tt>. Inside of the <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l441">_pysqlite_query_execute()</a> function <tt class="docutils literal">begin_statement</tt> is then checked and a transaction will not be started or ended unless it is non-null.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="transactional-statements" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label">[2]</td><td><em>(<a class="fn-backref" href="#id2">1</a>, <a class="fn-backref" href="#id4">2</a>)</em> The <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l441">_pysqlite_query_execute()</a> function is responsible for executing all of the statements that are given to the module and it only starts a transaction (by calling <tt class="docutils literal">_pysqlite_connection_begin()</tt>) if the statement is one of the types mentioned.</td></tr>
</tbody>
</table>
<table class="docutils footnote" frame="void" id="transaction-check" rules="none">
<colgroup><col class="label" /><col /></colgroup>
<tbody valign="top">
<tr><td class="label"><a class="fn-backref" href="#id5">[3]</a></td><td>In <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l441">_pysqlite_query_execute()</a> there is a <a class="reference external" href="http://hg.python.org/cpython/file/d37f963394aa/Modules/_sqlite/cursor.c#l752">preprocessor conditional</a> that conditionally enables the check, and as far as I could tell there is no explicit check to see if the user ever sends a <tt class="docutils literal">BEGIN</tt> themselves.</td></tr>
</tbody>
</table>
</div>
</div>

    </div>
    <div class="post-footer">
        <br>--<br><br>
        <a href="/blog-index.htm">« more posts</a> | follow me via <a href="https://twitter.com/itsjohncs">twitter</a>, or <a href="http://johncs.com/rss.xml">RSS</a>
    </div>
    <link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:300,400,600' rel='stylesheet' type='text/css'>
    <!-- inject:body-end:javascript -->
    <script>// Promise Polyfill
(function(){'use strict';var f,g=[];function l(a){g.push(a);1==g.length&&f()}function m(){for(;g.length;)g[0](),g.shift()}f=function(){setTimeout(m)};function n(a){this.a=p;this.b=void 0;this.f=[];var b=this;try{a(function(a){q(b,a)},function(a){r(b,a)})}catch(c){r(b,c)}}var p=2;function t(a){return new n(function(b,c){c(a)})}function u(a){return new n(function(b){b(a)})}function q(a,b){if(a.a==p){if(b==a)throw new TypeError;var c=!1;try{var d=b&&b.then;if(null!=b&&"object"==typeof b&&"function"==typeof d){d.call(b,function(b){c||q(a,b);c=!0},function(b){c||r(a,b);c=!0});return}}catch(e){c||r(a,e);return}a.a=0;a.b=b;v(a)}}
function r(a,b){if(a.a==p){if(b==a)throw new TypeError;a.a=1;a.b=b;v(a)}}function v(a){l(function(){if(a.a!=p)for(;a.f.length;){var b=a.f.shift(),c=b[0],d=b[1],e=b[2],b=b[3];try{0==a.a?"function"==typeof c?e(c.call(void 0,a.b)):e(a.b):1==a.a&&("function"==typeof d?e(d.call(void 0,a.b)):b(a.b))}catch(h){b(h)}}})}n.prototype.g=function(a){return this.c(void 0,a)};n.prototype.c=function(a,b){var c=this;return new n(function(d,e){c.f.push([a,b,d,e]);v(c)})};
function w(a){return new n(function(b,c){function d(c){return function(d){h[c]=d;e+=1;e==a.length&&b(h)}}var e=0,h=[];0==a.length&&b(h);for(var k=0;k<a.length;k+=1)u(a[k]).c(d(k),c)})}function x(a){return new n(function(b,c){for(var d=0;d<a.length;d+=1)u(a[d]).c(b,c)})};window.Promise||(window.Promise=n,window.Promise.resolve=u,window.Promise.reject=t,window.Promise.race=x,window.Promise.all=w,window.Promise.prototype.then=n.prototype.c,window.Promise.prototype["catch"]=n.prototype.g);}());

// Font Face Observer https://github.com/bramstein/fontfaceobserver
(function(){function l(a,b){document.addEventListener?a.addEventListener("scroll",b,!1):a.attachEvent("scroll",b)}function m(a){document.body?a():document.addEventListener?document.addEventListener("DOMContentLoaded",function c(){document.removeEventListener("DOMContentLoaded",c);a()}):document.attachEvent("onreadystatechange",function k(){if("interactive"==document.readyState||"complete"==document.readyState)document.detachEvent("onreadystatechange",k),a()})};function q(a){this.a=document.createElement("div");this.a.setAttribute("aria-hidden","true");this.a.appendChild(document.createTextNode(a));this.b=document.createElement("span");this.c=document.createElement("span");this.h=document.createElement("span");this.f=document.createElement("span");this.g=-1;this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";this.b.appendChild(this.h);this.c.appendChild(this.f);this.a.appendChild(this.b);this.a.appendChild(this.c)}
function w(a,b){a.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;left:-999px;white-space:nowrap;font:"+b+";"}function x(a){var b=a.a.offsetWidth,c=b+100;a.f.style.width=c+"px";a.c.scrollLeft=c;a.b.scrollLeft=a.b.scrollWidth+100;return a.g!==b?(a.g=b,!0):!1}function z(a,b){function c(){var a=k;x(a)&&null!==a.a.parentNode&&b(a.g)}var k=a;l(a.b,c);l(a.c,c);x(a)};function A(a,b){var c=b||{};this.family=a;this.style=c.style||"normal";this.weight=c.weight||"normal";this.stretch=c.stretch||"normal"}var B=null,C=null,D=null;function H(){if(null===C){var a=document.createElement("div");try{a.style.font="condensed 100px sans-serif"}catch(b){}C=""!==a.style.font}return C}function I(a,b){return[a.style,a.weight,H()?a.stretch:"","100px",b].join(" ")}
A.prototype.load=function(a,b){var c=this,k=a||"BESbswy",y=b||3E3,E=(new Date).getTime();return new Promise(function(a,b){null===D&&(D=!!window.FontFace);if(D){var J=new Promise(function(a,b){function e(){(new Date).getTime()-E>=y?b():document.fonts.load(I(c,c.family),k).then(function(c){1<=c.length?a():setTimeout(e,25)},function(){b()})}e()}),K=new Promise(function(a,c){setTimeout(c,y)});Promise.race([K,J]).then(function(){a(c)},function(){b(c)})}else m(function(){function r(){var b;if(b=-1!=f&&
-1!=g||-1!=f&&-1!=h||-1!=g&&-1!=h)(b=f!=g&&f!=h&&g!=h)||(null===B&&(b=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent),B=!!b&&(536>parseInt(b[1],10)||536===parseInt(b[1],10)&&11>=parseInt(b[2],10))),b=B&&(f==t&&g==t&&h==t||f==u&&g==u&&h==u||f==v&&g==v&&h==v)),b=!b;b&&(null!==d.parentNode&&d.parentNode.removeChild(d),clearTimeout(G),a(c))}function F(){if((new Date).getTime()-E>=y)null!==d.parentNode&&d.parentNode.removeChild(d),b(c);else{var a=document.hidden;if(!0===a||void 0===
a)f=e.a.offsetWidth,g=n.a.offsetWidth,h=p.a.offsetWidth,r();G=setTimeout(F,50)}}var e=new q(k),n=new q(k),p=new q(k),f=-1,g=-1,h=-1,t=-1,u=-1,v=-1,d=document.createElement("div"),G=0;d.dir="ltr";w(e,I(c,"sans-serif"));w(n,I(c,"serif"));w(p,I(c,"monospace"));d.appendChild(e.a);d.appendChild(n.a);d.appendChild(p.a);document.body.appendChild(d);t=e.a.offsetWidth;u=n.a.offsetWidth;v=p.a.offsetWidth;F();z(e,function(a){f=a;r()});w(e,I(c,'"'+c.family+'",sans-serif'));z(n,function(a){g=a;r()});w(n,I(c,'"'+
c.family+'",serif'));z(p,function(a){h=a;r()});w(p,I(c,'"'+c.family+'",monospace'))})})};"undefined"!==typeof module?module.exports=A:(window.FontFaceObserver=A,window.FontFaceObserver.prototype.load=A.prototype.load);}());

// Use that observer to enable the web fonts once they're loaded
var fonts = [
    (new FontFaceObserver("Source Code Pro", {weight: 300})).load(),
    (new FontFaceObserver("Source Code Pro", {weight: 400})).load(),
    (new FontFaceObserver("Source Code Pro", {weight: 600})).load(),
];

Promise.all(fonts).then(function() {
    document.body.className = document.body.className.replace(/fonts-loading/, "fonts-loaded");
}, function() {
	document.body.className = document.body.className.replace(/fonts-loading/, "");

	if (sessionStorage && sessionStorage.setItem) {
		sessionStorage.setItem("fontLoadingResult", "fail");
	}
});

(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-51104787-1', 'johncs.com');
ga('send', 'pageview');
</script>
    <!-- endinject -->
</body>
</html>
